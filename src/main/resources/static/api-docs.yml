openapi: '3.0.0'
info:
  title: Rest API Application
  version: 1.0.0
servers:
  - url: http://localhost:8082
tags:
  - name: 'users'
    description: 'Everything about users'
  - name: 'auth'
    description: 'authentication'
paths:
  /users:
    get:
      summary: 'Get all users'
      operationId: findAll
      security:
        - bearerAuth: [ ]
      tags:
        - 'users'
      parameters:
        - in: query
          name: age
          allowEmptyValue: true
          schema:
            type: integer
            description: 'Age of user'
            minimum: 0
        - in: query
          name: phone
          schema:
            type: string
            description: 'Phone of user'
            minLength: 5
        - in: query
          name: name
          schema:
            type: string
            description: 'Name of user'
            minLength: 1
        - in: query
          name: email
          schema:
            type: string
            description: 'Email of user'
            minLength: 5
        - in: query
          name: page
          schema:
            type: integer
            description: 'Number of page'
            minimum: 0
        - in: query
          name: size
          schema:
            type: integer
            description: 'Pages size'
            minimum: 0
      responses:
        '200':
          description: 'Found users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFullResponse'
    post:
      summary: 'Create new user'
      operationId: createUser
      security:
        - bearerAuth: [ ]
      tags:
        - 'users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: 'New user is created'
        '400':
          description: 'Wrong request format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    patch:
      summary: 'Update user email'
      operationId: updateUserEmail
      security:
        - bearerAuth: [ ]
      tags:
        - 'users'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailRequest'
        required: true
      responses:
        '200':
          description: 'User email was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullResponse'
        '400':
          description: 'Wrong request format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /users/{id}:
    get:
      summary: 'Get a user by id'
      operationId: findById
      security:
        - bearerAuth: [ ]
      tags:
        - 'users'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
            minimum: 0
          required: true
          description: 'Numeric ID of the user to get'
      responses:
        '200':
          description: 'User for requested ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullResponse'
        '404':
          description: 'Requested data not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 'Delete user by id'
      operationId: 'deleteUser'
      security:
        - bearerAuth: [ ]
      tags:
        - 'users'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
            minimum: 0
          required: true
          description: 'Numeric ID of the user to delete'
      responses:
        '204':
          description: 'User for requested ID is removed'

  /auth/v1/login:
    post:
      summary: 'User authentication'
      operationId: auth
      tags:
        - 'auth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDto'
        required: true
      responses:
        '200':
          description: 'User authentication successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDto'

  /auth/v1/register:
    post:
      summary: 'Creating new user'
      operationId: registerNewUser
      tags:
        - 'auth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: 'New user is created'
        '400':
          description: 'Wrong request format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

components:
  schemas:
    AuthenticationRequestDto:
      type: object
      description: 'Request for user auth'
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    AccessDto:
      type: object
      description: 'Bearer token for work'
      required:
        - username
        - token
      properties:
        username:
          type: string
        token:
          type: string

    ErrorDescription:
      type: object
      description: 'Error description'
      properties:
        field:
          type: string
        error:
          type: string

    ErrorResponse:
      type: object
      description: 'Error response'
      properties:
        message:
          type: string

    PhoneDto:
      type: object
      description: 'Phone number'
      required:
        - value
      properties:
        value:
          type: string
          minLength: 1
        id:
          type: integer
          format: int64

    ProfileDto:
      type: object
      description: 'User profile'
      required:
        - cash
      properties:
        cash:
          type: number
        id:
          type: integer
          format: int64

    UserFullResponse:
      type: object
      description: 'Full user details'
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
        email:
          type: string
        username:
          type: string
        phones:
          type: array
          items:
            $ref: "#/components/schemas/PhoneDto"
        profile:
          $ref: "#/components/schemas/ProfileDto"

    ValidationErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            errors:
              type: array
              items:
                $ref: "#/components/schemas/ErrorDescription"

    UserRequest:
      type: object
      description: 'Request for create new user'
      required:
        - name
        - email
        - username
        - password
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: integer
          minimum: 12
          maximum: 85
        username:
          type: string
        password:
          type: string
        profile:
          $ref: "#/components/schemas/ProfileDto"
        phones:
          type: array
          items:
            $ref: "#/components/schemas/PhoneDto"

    ChangeEmailRequest:
      type: object
      description: 'Request for change user email'
      required:
        - email
      properties:
        email:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]
